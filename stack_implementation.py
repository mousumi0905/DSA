# -*- coding: utf-8 -*-
"""Stack_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e39gnbn_Uhj7RrOG6tVTfEnUe0KwOENI
"""



"""stack using list without size limit"""

class stack:
  def __init__(self):
     self.list=[]
     
  def __str__(self):
    values= self.list.reverse()
    values=[str(x) for x in self.list]
    return "\n".join(values)
  def isempty(self):
    if self.list==[]:
      return True
    else:
      return False
  def push(self,value):
     self.list.append(value)
     return 'element has been added'
  def pop(self):
     if self.list==[]:
         return 'nothing to eleminate'
     else:
         return self.list.pop()
  def peek(self):
    if self.list==[]:
         return 'the stack is empty'
    else:
         return self.list[0]
  def delete(self):
    if self.list==[]:
         return 'the stack is empty'
    else:
         self.list=None

      
newstack=stack()
print(newstack.isempty())
newstack.push(2)
newstack.push(5)
newstack.push(7)
print(newstack)

"""stack using list with size limit"""

class stack:
  def __init__(self,maxsize):
    self.maxsize=maxsize
    self.list=[]
  def __str__(self):
    values=self.list.reverse()
    values=[str(x) for x in self.list]
    return ".\n".join(values)
  def isempty(self):
    if self.list==[]:
      return True
    else:
      return False
  def isfull(self,maxsize):
    if len(self.list)==maxsize:
      return True
    else:
      return False
  def push(self,value):
    if len(self.list)==self.maxsize:
      return 'stack is full'
    else:
      return self.list.append(value)
  def pop(self):
    if self.list==[]:
      return 'stack is empty'
    else:
      return self.list.pop()
  def peek(self):
    if self.list==[]:
      return 'stack is empty'
    else:
      return self.list.pop()
  def peek(self):
    if self.list==[]:
         return 'the stack is empty'
    else:
         return self.list[0]
  def delete(self):
    if self.list==[]:
         return 'the stack is empty'
    else:
         self.list=None
  
    
newstack=stack(10)
print(newstack.isempty())
newstack.push(2)
newstack.push(5)
newstack.push(7)
newstack.pop()
print(newstack)
newstack.peek()

"""stack using linked list"""

class Node:
  def __init__(self,value=None):
    self.value=value
    self.next=None
class Linkedlist:
  def __init__(self):
    self.head=None

  def __iter__(self):
    node=self.head
    while node:
      yield node
      node=node.next

class stack:
  def __init__(self):
    self.linkedlist=Linkedlist()
  def __str__(self):
    values=[str(x.value) for x in self.linkedlist]
    return ".\n".join(values)
  def isempty(self):
    if self.linkedlist.head == None:
      return True
    else:
      return False
  def push(self,value):
    node=Node(value)
    node.next=self.linkedlist.head
    self.linkedlist.head=node
    return 'pushed successfully'
  def pop(self):
    if self.linkedlist.head==None:
      return 'stack is empty'
    else:
      self.linkedlist.head=self.linkedlist.head.next
 
  def peek(self):
    if self.linkedlist==None:
         return 'the stack is empty'
    else:
         return self.linkedlist.head.value
  def delete(self):
    if self.linkedlist.head==None:
         return 'the stack is empty'
    else:
         self.linkedlist.head=None
  

  
    
newstack=stack()
print(newstack.isempty())
newstack.push(2)
newstack.push(5)
newstack.push(7)
newstack.push(8)
newstack.push(9)
newstack.pop()
print(newstack)
newstack.peek()
newstack.isempty()