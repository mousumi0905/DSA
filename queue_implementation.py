# -*- coding: utf-8 -*-
"""queue_implementation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdgMPaLa9VxhJeE-bm3Ch7EX580FBcT8

queue using list
"""

class queue:
  def __init__(self):
     self.list=[]
     
  def __str__(self):
    values=[str(x) for x in self.list]
    return "\n".join(values)
  def isempty(self):
    if self.list==[]:
      return True
    else:
      return False
  def enqueue(self,value):
     self.list.append(value)
     return 'element has been added'
  def dequeue(self):
     if self.list==[]:
         return 'nothing to eleminate'
     else:
         return self.list.pop(0)
  def peek(self):
    if self.list==[]:
         return 'the queue is empty'
    else:
         return self.list[0]
  def delete_full(self):
    if self.list==[]:
         return 'the queue is empty'
    else:
         self.list=None

      
newqueue=queue()
print(newqueue.isempty())
newqueue.enqueue(2)
newqueue.enqueue(5)
newqueue.enqueue(7)
print(newqueue)
print("****************************")
newqueue.peek()
newqueue.dequeue()
print(newqueue)

"""queue using linked list"""

class Node:
  def __init__(self,value=None):
    self.value=value
    self.next=None
class Linkedlist:
  def __init__(self):
    self.head=None
    self.tail=None

  def __iter__(self):
    node=self.head
    while node:
      yield node
      node=node.next

class queue:
  def __init__(self):
    self.linkedlist=Linkedlist()
  def __str__(self):
    values=[str(x.value) for x in self.linkedlist]
    return ".\n".join(values)


  def isempty(self):
    if self.linkedlist.head == None:
      return True
    else:
      return False


  def enqueue(self,value):
    node=Node(value)
    if self.linkedlist.head ==None:
      self.linkedlist.tail=node
      self.linkedlist.head=node
    else:
      self.linkedlist.tail.next=node
      self.linkedlist.tail=node
    return 'enqueued successfully'


  def dequeue(self):
    if self.linkedlist.head==None:
      return 'queue is empty'
    else:
      self.linkedlist.head=self.linkedlist.head.next
 
  def peek(self):
    if self.linkedlist==None:
         return 'the queue is empty'
    else:
         return self.linkedlist.head.value



  def delete_full(self):
    if self.linkedlist.head==None:
         return 'the queue is empty'
    else:
         self.linkedlist.head=None
         self.linkedlist.tail=None
  

  
    
newqueue=queue()
print(newqueue.isempty())

newqueue.enqueue(1)
newqueue.enqueue(2)
newqueue.enqueue(3)
newqueue.enqueue(4)
newqueue.enqueue(5)
print(newqueue)
newqueue.dequeue()
print("******************************")


print(newqueue)
print("*********************")
newqueue.peek()