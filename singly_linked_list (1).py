# -*- coding: utf-8 -*-
"""singly_linked_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HhJBwO6MeuI3G3nXfZ0VmlPhsKXu1XxN

Singly linked list
"""

#creating singly linked list
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
class slist:
    #initializing
    def __init__(self):
        self.head=None
        self.tail=None
    def __iter__(self):
        Node = self.head
        while Node:
            yield Node
            Node = Node.next
    #inserting in linked list
    def insert(self,value,location):
        newnode=Node(value)
        if self.head is None:
            self.head=newnode
            self.tail=newnode
        else:
            if location==0:
                newnode.next=self.head
                self.head=newnode
            elif location==-1:
                newnode.next=None
                self.tail.next=newnode
                self.tail=newnode
            else:
                tempnode=self.head
                index=0
                while index<location-1:
                    tempnode=tempnode.next
                    index=index+1
                nextnode=tempnode.next
                tempnode.next=newnode
                newnode.next= nextnode
                if tempnode == self.tail:
                    self.tail=newnode
    #printing the linkedlist
    def print(self):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                print(Node.value)
                Node=Node.next

    #searching a node
    def search(self,value):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                if Node.value==value:
                    return 'found'
                Node=Node.next
            return 'Not found'


    #deleting a  node
    def delete(self,location):
        if self.head==None:
            print("no list exist")
        else:
            if location==0:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                else:
                    self.head=self.head.next
            elif location==-1:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                else:
                    tempnode=self.head
                    while tempnode is not None:
                        if tempnode.next==self.tail:
                            break
                        tempnode=tempnode.next
                        tempnode.next=None
                        self.tail=tempnode
            else:
                  tempNode = self.head
                  index = 0
                  while index < location - 1:
                    tempNode = tempNode.next
                    index += 1
                  nextnode=tempNode.next
                  tempNode.next=nextnode.next

    #deleting the full list
    def deletefull(self):
        if self.head==None:
            print("no list exist")
        else:
            self.head=None
            self.tail=None

single_list= slist()
single_list.insert(0,0)
single_list.insert(1,-1)
single_list.insert(3,0)
single_list.insert(4,2)
single_list.insert(5,-1)
print([node.value for node in single_list]) 
single_list.delete(4)
print([node.value for node in single_list]) 
single_list.search(1)
single_list.print()

"""circular singly linked list"""

#creating singly linked list
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
class cslist:
    #initializing
    def __init__(self):
        self.head=None
        self.tail=None
    def __iter__(self):
        Node = self.head
        while Node:
            yield Node
            Node = Node.next
            if Node==self.tail.next:
                break
     #  Creation of circular singly linked list
    def createCSLL(self, nodeValue):
        node = Node(nodeValue)
        node.next = node
        self.head = node
        self.tail = node
        return "The CSLL has been created"
    #inserting in linked list
    def insert(self,value,location):
        newnode=Node(value)
        if self.head is None:
            self.head=newnode
            self.tail=newnode
            newnode.next=newnode
        else:
            if location==0:
                newnode.next=self.head
                self.head=newnode
                self.tail.next=newnode
            elif location==-1:
                newnode.next=self.head
                self.tail.next=newnode
                self.tail=newnode
            else:
                tempnode=self.head
                index=0
                while index<location-1:
                    tempnode=tempnode.next
                    index=index+1
                nextnode=tempnode.next
                tempnode.next=newnode
                newnode.next= nextnode
               
    #printing the linkedlist
    def print(self):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node:
                print(Node.value)
                Node=Node.next
                if Node==self.tail.next:
                     break
                

    #searching a node
    def search(self,value):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                if Node.value==value:
                    return 'found'
                Node=Node.next
                if Node==self.tail.next:
                     return 'Not found'
            


    #deleting a  node
    def delete(self,location):
        if self.head==None:
            print("no list exist")
        else:
            if location==0:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                    self.head.next=None
                else:
                    self.head=self.head.next
                    self.tail.next=self.head
            elif location==-1:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                    self.head.next=None
                else:
                    tempnode=self.head
                    while tempnode is not None:
                        if tempnode.next==self.tail:
                            break
                        tempnode=tempnode.next
                    tempnode.next=self.head
                    self.tail=tempnode
            else:
                  tempNode = self.head
                  index = 0
                  while index < location - 1:
                       tempNode = tempNode.next
                       index += 1
                  nextnode=tempNode.next
                  tempNode.next=nextnode.next

    #deleting the full list
    def deletefull(self):
        if self.head==None:
            print("no list exist")
        else:
            self.head=None
            self.tail=None
            self.tail.next=None

csingle_list= cslist()
csingle_list.insert(10,0)
csingle_list.insert(3,-1)
csingle_list.insert(4,0)
csingle_list.insert(5,-1)
csingle_list.insert(3,0)
csingle_list.insert(31,1)
csingle_list.insert(16,4)
print([node.value for node in csingle_list]) 
csingle_list.delete(4)
csingle_list.insert(16,1)
print([node.value for node in csingle_list]) 
csingle_list.print()