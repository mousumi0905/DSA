# -*- coding: utf-8 -*-
"""Doubly_linked_list.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_gRIPKXuFT8HSTh9Opb8RD5mIq6f-52
"""

#creating Doubly linked list
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
        self.prev=None
class dlist:
    #initializing
    def __init__(self):
        self.head=None
        self.tail=None
    def __iter__(self):
        Node = self.head
        while Node:
            yield Node
            Node = Node.next
    #creation of doubly linked list
    def creation(self,nodevalue):
        node=Node(nodevalue)
        self.head=node
        self.tail=node
        node.next=None
        node.prev=None
   

    #inserting in linked list
    def insert(self,value,location):
        newnode=Node(value)
        if self.head is None:
            return 'List does not exist'
        else:
            if location==0:
                newnode.prev=None
                newnode.next=self.head
                self.head.prev=newnode
                self.head=newnode
            elif location==-1:
                newnode.next=None
                self.tail.next=newnode
                newnode.prev=self.tail
                self.tail=newnode
            else:
                tempnode=self.head
                index=0
                while index<location-1:
                    tempnode=tempnode.next
                    index=index+1
                nextnode=tempnode.next
                newnode.prev=tempnode
                tempnode.next=newnode
                newnode.next= nextnode
                nextnode.prev=newnode
    #printing the linkedlist
    def print(self):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                print(Node.value)
                Node=Node.next
       #reverse printing the linkedlist
    def revprint(self):
        if self.tail==None:
            print("no list exist")
        else:
            Node=self.tail
            while Node is not None:
                print(Node.value)
                Node=Node.prev

    #searching a node
    def search(self,value):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                if Node.value==value:
                    return 'found'
                Node=Node.next
            return 'Not found'


    #deleting a  node
    def delete(self,location):
        if self.head==None:
            print("no list exist")
        else:
            if location==0:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                else:
                    self.head=self.head.next
                    self.head.prev=None
            elif location==-1:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None

                else:
                    self.tail=self.tail.prev
                    self.tail.next=None
    
            else:
                tempnode = self.head
                index = 0
                while index < location - 1:
                    tempnode = tempnode.next
                    index += 1
                nextnode=tempnode.next 
                nextnode.prev=tempnode
                tempnode.next=nextnode.next
                    
                
                    

    #deleting the full list
    def deletefull(self):
        if self.head==None:
            print("no list exist")
        else:
            tempnode=self.head
            while tempnode is not None:
              tempnode.prev=None
              tempnode=tempnode.next
            self.head=None
            self.tail=None

doubly_list= dlist()
doubly_list.creation(5)
doubly_list.insert(10,0)
doubly_list.insert(20,-1)
doubly_list.insert(30,0)
doubly_list.insert(40,-1)
doubly_list.insert(50,2)
doubly_list.print()
print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
doubly_list.delete(2)

doubly_list.print()
doubly_list.search(80)

"""Circular doubly linked list"""

#creating Doubly linked list
class Node:
    def __init__(self,value):
        self.value=value
        self.next=None
        self.prev=None
class sdlist:
    #initializing
    def __init__(self):
        self.head=None
        self.tail=None
    def __iter__(self):
        Node = self.head
        while Node:
            yield Node
            Node = Node.next
            if Node==self.tail.next:
                 break   
    #creation of doubly linked list
    def creation(self,nodevalue):
        node=Node(nodevalue)
        self.head=node
        self.tail=node
        node.prev=node
        node.next=node
   

    #inserting in linked list
    def insert(self,value,location):
        newnode=Node(value)
        if self.head is None:
            return 'List does not exist'
        else:
            if location==0:
                newnode.prev=self.tail
                newnode.next=self.head
                self.head.prev=newnode
                self.head=newnode
            elif location==-1:
                newnode.next=self.head
                self.tail.next=newnode
                newnode.prev=self.tail
                self.tail=newnode
            else:
                tempnode=self.head
                index=0
                while index<location-1:
                    tempnode=tempnode.next
                    index=index+1
                nextnode=tempnode.next
                newnode.prev=tempnode
                tempnode.next=newnode
                newnode.next= nextnode
                nextnode.prev=newnode
    #printing the linkedlist
    def print(self):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                print(Node.value)
                if Node==self.tail:
                  break
                Node=Node.next
                
       #reverse printing the linkedlist
    def revprint(self):
        if self.tail==None:
            print("no list exist")
        else:
            Node=self.tail
            while Node is not None:
                print(Node.value)
                if Node==self.head:
                  break
                Node=Node.prev
                

    #searching a node
    def search(self,value):
        if self.head==None:
            print("no list exist")
        else:
            Node=self.head
            while Node is not None:
                if Node.value==value:
                    return 'found'
                if Node==self.tail:
                   return 'Not found'
                Node=Node.next
            


    #deleting a  node
    def delete(self,location):
        if self.head==None:
            print("no list exist")
        else:
            if location==0:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None
                else:
                    self.head=self.head.next
                    self.head.prev=self.tail
            elif location==-1:
                if self.head==self.tail:
                    self.head=None
                    self.tail=None

                else:
                    self.tail=self.tail.prev
                    self.tail.next=self.head
    
            else:
                tempnode = self.head
                index = 0
                while index < location - 1:
                    tempnode = tempnode.next
                    index += 1
                nextnode=tempnode.next 
                nextnode.prev=tempnode
                tempnode.next=nextnode.next
                    
                
                    

    #deleting the full list
    def deletefull(self):
        if self.head==None:
            print("no list exist")
        else:
          self.tail.next=None
          tempnode=self.head
          while tempnode is not None:
              tempnode.prev=None
              tempnode=tempnode.next
          self.head=None
          self.tail=None

sdoubly_list= sdlist()
sdoubly_list.creation(5)
sdoubly_list.insert(80,0)
sdoubly_list.insert(20,-1)
sdoubly_list.insert(30,0)
sdoubly_list.insert(40,-1)
sdoubly_list.insert(50,2)
sdoubly_list.print()
print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
sdoubly_list.delete(3)

sdoubly_list.print()
sdoubly_list.search(80)